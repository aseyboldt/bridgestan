name: bridgestan tests

on:
  push:
    branches:
      - 'main'
  pull_request:
  workflow_dispatch: {}

env:
  CACHE_VERSION: 6

jobs:
  build_test_models:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest]
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out github
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Stan build caching
        uses: actions/cache@v3
        id: stan-cache
        with:
          path: ./stan/
          key: ${{ runner.os }}-stan-${{ hashFiles('stan/src/stan/version.hpp') }}-v${{ env.CACHE_VERSION }}

      - name: Build C example (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd c-example/
          make example
          make example_static
          rm ../src/bridgestan.o
          rm ../test_models/full/full_model.a

          ./example
          ./example_static
        shell: bash

      # we use the cache here to build the Stan models once for multiple interfaces
      - name: Set up test model cache
        uses: actions/cache@v3
        id: test-models
        with:
          path: ./test_models/
          key: ${{ hashFiles('**/*.stan', 'src/*', 'stan/src/stan/version.hpp') }}-${{ matrix.os }}-v${{ env.CACHE_VERSION }}

      - name: Build test models (Unix)
        if: matrix.os != 'windows-latest' && steps.test-models.outputs.cache-hit != 'true'
        run: |
          make STAN_THREADS=true O=0 test_models -j2
        shell: bash

      - name: Build test models (Windows)
        if: matrix.os == 'windows-latest' && steps.test-models.outputs.cache-hit != 'true'
        run: |
          mingw32-make.exe STAN_THREADS=true O=0 test_models -j2
        shell: pwsh

  # Seperate for now, weird dynamic linking issues need resolving in GHA runner
  test_clients_windows:
    needs: [build_test_models]
    runs-on: windows-latest
    steps:
      - name: Check out github
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Restore Stan
        uses: actions/cache@v3
        id: stan-cache
        with:
          path: ./stan/
          key: ${{ runner.os }}-stan-${{ hashFiles('stan/src/stan/version.hpp') }}-v${{ env.CACHE_VERSION }}

      - name: Setup TBB
        run: |
          Add-Content $env:GITHUB_PATH "$(pwd)/stan/lib/stan_math/lib/tbb"

      - name: Restore built models
        uses: actions/cache@v3
        id: test-models
        with:
          path: ./test_models/
          key: ${{ hashFiles('**/*.stan', 'src/*', 'stan/src/stan/version.hpp') }}-windows-latest-v${{ env.CACHE_VERSION }}

      - name: Install LLVM and Clang  # Required for bindgen
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "15.0"
          directory: ${{ runner.temp }}/llvm

      - name: Get rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run rust tests
        working-directory: ./rust
        timeout-minutes: 10
        env:
          LIBCLANG_PATH: ${{ runner.temp }}/llvm/lib
          LLVM_CONFIG_PATH: ${{ runner.temp }}/llvm/bin/llvm-config
        run: |
          cargo test -- --test-threads 1 --nocapture create_all_late_drop_fwd
          cargo test -- --test-threads 1 --nocapture create_all_late_drop_bwd
          cargo test -- --test-threads 1 --nocapture create_all_serial
          cargo test -- --test-threads 1 --nocapture create_all_thread_serial
          cargo test -- --test-threads 1 --nocapture create_all_thread_barrier_serial
          cargo test -- --test-threads 1 --nocapture load_order_min_serial
          cargo test -- --test-threads 1 --nocapture load_order_all_serial
          cargo test -- --test-threads 1 --nocapture load_order_min_min_parallel
          cargo test -- --test-threads 1 --nocapture load_order_min_parallel
          cargo test -- --test-threads 1 --nocapture load_order_all_parallel
          cargo test -- --test-threads 1 --nocapture load_twice_same
          cargo test -- --test-threads 1 --nocapture load_after_unload_same
          cargo test -- --test-threads 1 --nocapture load_twice_diff
          cargo test -- --test-threads 1 --nocapture load_after_unload_diff
          cargo test -- --test-threads 1 --nocapture load_twice_reorder_diff
          cargo test -- --test-threads 1 --nocapture create_all_parallel
          cargo test -- --test-threads 1 --nocapture load_parallel
          cargo test --verbose -- --test-threads 1 --nocapture
          cargo test --verbose -- --nocapture
